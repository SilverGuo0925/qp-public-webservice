package qp.scs.service;

import static com.google.common.base.Objects.equal;

import org.springframework.stereotype.Service;

import qp.scs.dto.request.LoginRequestDTO;
import qp.scs.dto.response.LoginResponseDTO;
import qp.scs.exception.LoginFailedException;
import qp.scs.exception.SessionExpiredException;
import qp.scs.model.SessionToken;
import qp.scs.model.User;
import qp.scs.model.api.Entity;
import qp.scs.repository.UserRepository;
import qp.scs.security.TokenUser;

import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.joda.time.Period;

import java.io.IOException;
import java.io.Serializable;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.concurrent.atomic.AtomicLong;

import qp.scs.security.TokenHandler;

@Service
@Transactional
public class UserService extends BaseService {

	private static Integer expireTokenHrs;
	
	private static Integer expireTokenMins;
	
	private final AtomicLong counter = new AtomicLong();

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private TokenHandler tokenHandler;
	
	@Value("${token.expiry.hours}")
	public void setExpireTokenHrs(Integer expireTokenHrs) {
		UserService.expireTokenHrs = expireTokenHrs;
	}
	
	@Value("${token.expiry.minutes}")
	public void setExpireTokenMins(Integer expireTokenMins) {
		UserService.expireTokenMins = expireTokenMins;
	}
	public LoginResponseDTO logUserIn(LoginRequestDTO request) {
		logger.info("Attempting login for user[login: " +  request.username + "]");
		
		User u = userRepository.getUserByUserName(request.username);

		// Verify if the username is valid
		if (u == null) {
			logger.info("Login failed unable to find user with login of \'" +  request.username + "\'");
			throwLoginFailedException();
		}
//		
//		if(u != null){
//			Customer customer = u.getCustomerUser();
//			if(customer.getStatus().equals(Codes.Mappings.simpleStatuses.get(Codes.Statuses.SIMPLE_INACTIVE))){
//				throwCustomerInactiveException();
//			}
//		}
		// Verify if the password is valid
		boolean validPassword = request.password.equals(u.password);
		if (validPassword == false) {
			logger.info("Login failed password attempted of \'" +  request.password + "\' does not match with DB password");
			throwLoginFailedException();
		}

		
		return logUserIn(u);
	}

	/**
	 * Logs the specified user in
	 * 
	 * @param user
	 * @return
	 */
	public LoginResponseDTO logUserIn(User user) {
		// Generate the token based on the user
		Period period = new Period(expireTokenHrs, expireTokenMins, 0, 0);
		TokenUser tokenUser = new TokenUser(user, period);
		String token = tokenHandler.createTokenForUser(tokenUser);

		saveSessionToken(tokenUser, token);

		logger.info("Login successful for user[name: " + user.getUsername());
		
		return new LoginResponseDTO(token,false);
	}
	

	/**
	 * Saves a session token
	 * 
	 * @param user
	 * @param token
	 */
	private void saveSessionToken(TokenUser user, String token) {
		SessionToken session = new SessionToken();
		session.setExpires(LocalDateTime.ofInstant(Instant.ofEpochMilli(user.expires),
				ZoneId.systemDefault()));
		session.setToken(token);
		session.setSessionUser(get(User.class, user.id));

		save(session);
	}
	
	
	/**
	 * Throws a login failed exception
	 */
	private void throwLoginFailedException() {
		throw new LoginFailedException();
	}
	
	/**
	 * Returns the id of the user from the specified token.
	 * 
	 * @param token
	 * @return
	 */
	public Long getUserIdFromToken(String token) {
		TokenUser tokenUser = tokenHandler.parseUserFromToken(token);
		if (tokenUser == null) {
			throw new SessionExpiredException();
		}

		SessionToken session = userRepository.getSession(token);
		if (equal(session.getSessionUser().getId(), tokenUser.id) == false) {
			// The user id from the session doesn't match what is in the database, possible that token was compromised
			throw new LoginFailedException();
		}

		// Another expiry check here, just in case
//		if (LocalDateTime.now().isAfter(session.getExpires())) {
//			throw new SessionExpiredException();
//		}

		return tokenUser.id;
	}
	
	/**
	 * Returns the user based on the session token
	 * 
	 * @param token
	 * @return
	 */
	public User getUserFromToken(String token) {
		Long userId = getUserIdFromToken(token);
		return get(User.class, userId);
		
	}


	public void export(XSSFWorkbook workbook, HttpServletResponse response, String contentType) throws IOException {
		workbook.write(response.getOutputStream());
		response.setContentType(contentType);
		response.setHeader("Content-Disposition", "attachment");
		response.flushBuffer();
		workbook.close();
	}
}
